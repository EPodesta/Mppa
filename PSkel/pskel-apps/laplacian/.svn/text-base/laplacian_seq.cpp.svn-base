#include <iostream>
#include <omp.h>
#include <stdlib.h>
#include <stdio.h>

#define IDX(i,j,k) ((i)+x_max*((j)+y_max*(k)))

using namespace std;
/**
 * Get current time in seconds.

double seconds ()
{
    struct timeval tv;
    gettimeofday (&tv, NULL);
    return ((double) tv.tv_sec) + 1e-6 * tv.tv_usec;
}
 */

/**
 * Do the calculation.
 */
int main(int argc, char** argv)
{
    int x_max, y_max, z_max;
    int i, j, k, t;
    int x, y, z;
    double t1, t2, nFlops;

    //float* __restrict__ u_0_0 = NULL;
    //float* __restrict__ u_0_1 = NULL;
	float* u_0_0;
    float* u_0_1;
	float* tmp;
    float alpha, beta;

	const int T_MAX = atoi(argv[4]);

	if (argc != 5)
	{
		printf ("Wrong number of parameters.\n", argv[0]);
		printf ("Usage: laplacian_seq WIDTH HEIGHT DEPTH ITERATIONS\n");
		exit (-1);
	}
	
	x_max = atoi(argv[1]);
	y_max = atoi(argv[2]);
	z_max = atoi(argv[3]);

 
    /* allocate memory */
    u_0_0 = (float*) malloc (x_max * y_max * z_max * sizeof (float));
    u_0_1 = (float*) malloc (x_max * y_max * z_max * sizeof (float));

    alpha = 1.f; // / (float) x_max;
    beta = 2.f; // / (float) y_max;

    /* initialize the first timesteps */
	#pragma omp parallel for private (k,j,i)
    for (k = 0; k < z_max; k++)
    {
		for (j = 0; j < y_max; j++)
		{
			for (i = 0; i < x_max; i++)
			{
	        	u_0_0[IDX(i,j,k)] = 1. + i*0.1 + j*0.01 + k*0.001;
	         	u_0_1[IDX(i,j,k)] = 0;
			}
		}
	}
	

    /* do the calculation */ 
	t1 = omp_get_wtime();
	for (t = 0; t < T_MAX; t++)
	{
		#pragma omp parallel for private(z,y,x)
		for (z = 1; z < z_max - 1; z++)
      	{
    		for (y = 1; y < y_max - 1; y++)
    	 	{
    			for (x = 1; x < x_max - 1; x++)
    			{
                    u_0_1[IDX(x,y,z)] = alpha * u_0_0[IDX(x,y,z)] +
                        beta * (
                            u_0_0[IDX(x+1,y,z)] + u_0_0[IDX(x-1,y,z)] +
                            u_0_0[IDX(x,y+1,z)] + u_0_0[IDX(x,y-1,z)] +
                            u_0_0[IDX(x,y,z+1)] + u_0_0[IDX(x,y,z-1)]
                    );
    			}
    		}
    	}

    	tmp = u_0_0;
    	u_0_0 = u_0_1;
    	u_0_1 = tmp;
	}
	u_0_1 = u_0_0;
	u_0_0 = tmp;
	
	t2 = omp_get_wtime();
   
	
	cout.precision(6);
	
	/*
	cout<<"OUTPUT"<<endl;
	for(int i=10; i<z_max/2;i+=10){
		cout<<"("<<i<<","<<i<<","<<i<<") = "<<u_0_1[i + x_max*(i+y_max*i)]<<"\t\t("<<x_max-i<<","<<y_max-i<<","<<z_max-i<<") = "<<u_0_1[i + x_max*(i+y_max*i)]<<endl;
	}

	cout<<"\n\nRESULTS:"<<endl;
	for (z = 1; z < z_max-1; z++){
		for (y = 1; y < y_max-1; y++){
			for (x = 1; x < x_max-1; x++){
	         	cout<<u_0_1[x + x_max*(y+y_max*z)]<<"\t";
			}
			cout<<endl;
		}
		cout<<endl;
	}
	*/
	
	
	
	/*cout<<u_0_1[IDX(1,1,1)]<<endl;
	cout<<u_0_1[IDX(1,1,2)]<<endl;
	cout<<u_0_1[IDX(x_max-2,y_max-2,z_max-3)]<<endl;
	cout<<u_0_1[IDX(x_max-2,y_max-2,z_max-2)]<<endl;*/
	
	cout<<"OUTPUT"<<endl;
	for(int i=10; i<z_max/2;i+=10){
		cout<<"("<<i<<","<<i<<","<<i<<") = "<<u_0_1[IDX(i,i,i)]<<"\t\t("<<x_max-i<<","<<y_max-i<<","<<z_max-i<<") = "<<u_0_1[IDX(x_max-i,y_max-i,z_max-i)]<<endl;
	}
	
	nFlops = (double) (x_max-2) * (double) (y_max-2) * (double) (z_max-2) * T_MAX * 8.0;
    printf ("FLOPs in stencil code:      %e\n", nFlops);    
	printf ("Time spent in stencil code: %f\n", t2 - t1);
	printf ("Performance in GFlop/s:     %f\n", nFlops / (1e9 * (t2 -t1)));
	
	
    /* clean up */
	free (u_0_0);
	free (u_0_1);
	
	return EXIT_SUCCESS;
}
