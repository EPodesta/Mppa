//#define PSKEL_LOGMODE 1
//#include "../../include/PSkel.h"
#include <stdio.h>
#include <omp.h>
#include <iostream>
#include <string>
#include <sstream>
#include <fstream>

//#define PSKEL_SHARED_MASK
#include "../../include/PSkelArray.h"
#include "../../include/PSkelMask.h"
#include "../../include/PSkelStencilv2.h"

using namespace std;
using namespace PSkel;

struct Arguments{
	float h;
};

namespace PSkel{
	__parallel__ void stencilKernel(Array2D<float> input,Array2D<float> output,Mask2D<float> mask,Arguments args, size_t i, size_t j){
		
		output(i,j) = 0.25 * (mask.get(0, input, i, j) + mask.get(1, input, i, j) + 
							   mask.get(2, input, i, j) + mask.get(3, input, i, j) - 4 * args.h * args.h );
		
	}
}

int main(int argc, char **argv){
	int x_max, y_max, T_MAX, GPUBlockSize, numCPUThreads;
	float GPUTime;

	if (argc != 8){
		printf ("Wrong number of parameters.\n", argv[0]);
		printf ("Usage: jacobi WIDTH HEIGHT ITERATIONS GPUTIME GPUBLOCKS CPUTHREADS OUTPUT_WRITE_FLAG\n");
		exit (-1);
	}

	x_max = atoi (argv[1]);
	y_max = atoi (argv[2]);
	T_MAX=atoi(argv[3]);
	GPUTime = atof(argv[4]);
	GPUBlockSize = atoi(argv[5]);
	numCPUThreads = atoi(argv[6]);
	int writeToFile = atoi(argv[7]);
	
	Array2D<float> inputGrid(x_max, y_max);
	Array2D<float> outputGrid(x_max, y_max);
	Mask2D<float> mask(4);
	
	mask.set(0,1,0,0);
	mask.set(1,-1,0,0);
	mask.set(2,0,1,0);
	mask.set(3,0,-1,0);
	
	Arguments args;
	args.h = 1.f / (float) x_max;
		
	omp_set_num_threads(numCPUThreads);

	/* initialize the first timesteps */
	#pragma omp parallel for
    	for(size_t h = 0; h < inputGrid.getHeight(); h++){		
		for(size_t w = 0; w < inputGrid.getWidth(); w++){
			inputGrid(h,w) = 1.0 + w*0.1 + h*0.01;
		}
	}	
	
	Stencil2D<Array2D<float>, Mask2D<float>, Arguments> stencil(inputGrid, outputGrid, mask, args);
	//Runtime< Stencil2D<Array2D<float>, Mask2D<float>, Arguments> > stencilComponent(&jacobi);

	//stencilComponent.runIterator(T_MAX,GPUTime, GPUBlockSize, numCPUThreads);	
	stencil.runIterativeGeneticGPU(T_MAX,GPUBlockSize); 
	if(writeToFile == 1){
		stringstream outputFile;
		outputFile << "output_" <<x_max << "_" << y_max << "_" << T_MAX << "_" << GPUTime << "_" << GPUBlockSize <<"_" << numCPUThreads << ".txt";
		string out = outputFile.str();
		
		ofstream ofs(out.c_str(), std::ofstream::out);
		
		ofs.precision(6);
		
		for (size_t h = 1; h < outputGrid.getHeight()-1; h++){		
			for (size_t w = 1; w < outputGrid.getWidth()-1; w++){
				ofs<<outputGrid(h,w)<<" ";
			}
			ofs<<endl;
		}		
		
	}
	return 0;
}
